manifest {
    author = 'Patrick Blaney'
    homePage = 'https://github.com/pblaney/mgp1000'
    description = 'Myeloma Genome Project 1000 Bioinformatics Nextflow Pipeline'
    name = 'MGP1000'
    nextflowVersion = '>=20.01.0'
}

// Set global default parameters used in config file that will be overwritten with CLI run command
params.email = null
params.run_id = null
params.cpus = null
params.memory = null
params.queue_size = 100
params.executor = 'slurm'

notification {
    
    if( "${params.email}" ) {
        enabled = true
        to = "${params.email}"
        from = "${params.email}"
    } else {
        enabled = false
    }
}

report {

    if( "${params.run_id}" ) {
        enabled = true
        file = "nextflow_report.${params.run_id}.html"
    } else {
        enabled = false
    }   
}

timeline {

    if( "${params.run_id}" ) {
        enabled = true
        file = "timeline_report.${params.run_id}.html"
    } else {
        enabled = false
    }
}

trace {

    if( "${params.run_id}" ) {
        enabled = true
        fields = "task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes"
        file = "trace.${params.run_id}.txt"
    } else {
        enabled = true
        fields = "task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes"
        file = "trace.txt"
    }
}

executor {
    $lsf {
        perJobMemLimit = true
        queueSize = "${params.queue_size}"
        queueStatInterval = '3 min'
        exitReadTimeout = '60 min'
        submitRateLimit = '10 sec'
    }
  
    $slurm {
        queueSize = "${params.queue_size}"
        queueStatInterval = '3 min'
        exitReadTimeout = '60 min'
        submitRateLimit = '10 sec'
    }
}

// #################################################### \\
// ~~~~~~~~~~~~~~ PROFILE CONFIGURATION ~~~~~~~~~~~~~~~ \\

profiles {

    // Profile for Preprocessing step of pipeline using Slurm executor
    preprocessing {
        
        singularity.enabled = true
        singularity.autoMounts = true

        if( "${params.executor}" == 'slurm' ) {
            process.clusterOptions = '--ntasks-per-node=1'
        }

        process {

            errorStrategy = { sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' }
            maxRetries = 3

            withName: mergeLaneSplitFastqs_mergelane {
                executor = "${params.executor}"
                container = "containers/fastqtools-0.8.3.simg"
                cpus = 1
                memory = params.memory ?: { 1.GB * task.attempt }
                time = { 8.h * task.attempt }
            }
            withName: gatherInputFastqs_fastqgatherer {
                executor = "${params.executor}"
                container = "containers/base.simg"
                cpus = 1
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: revertMappedBam_gatk {
                executor = "${params.executor}"
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: { 18.GB * task.attempt }
                time = { 24.h * task.attempt }
            }
            withName: bamToFastq_biobambam {
                executor = "${params.executor}"
                container = "containers/biobambam-2.0.87.simg"
                cpus = 1
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 36.h * task.attempt }
            }
            withName: fastqTrimming_trimmomatic {
                executor = "${params.executor}"
                container = "containers/trimmomatic-0.36.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 6.GB * task.attempt }
                time = { 18.h * task.attempt }
            }
            withName: fastqQualityControlMetrics_fastqc {
                executor = "${params.executor}"
                container = "containers/fastqc-0.11.9.simg"
                cpus = 1
                memory = params.memory ?: { 512.MB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: alignment_bwa {
                executor = "${params.executor}"
                container = "containers/bwa-0.7.17-sambamba-0.7.1.simg"
                cpus = params.cpus ?: 10
                memory = params.memory ?: { 64.GB * task.attempt }
                time = { 32.h * task.attempt }
            }
            withName: fixMateInformationAndSort_gatk {
                executor = "${params.executor}"
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 2
                memory = params.memory ?: { 18.GB * task.attempt }
                time = { 24.h * task.attempt }
            }
            withName: markDuplicatesAndIndex_sambamba {
                executor = "${params.executor}"
                container = "containers/sambamba-0.7.1.simg"
                cpus = 1
                memory = params.memory ?: { 8.GB * task.attempt }
                time = { 24.h * task.attempt }
            }
            withName: downsampleBam_gatk {
                executor = "${params.executor}"
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 2
                memory = params.memory ?: { 14.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: baseRecalibrator_gatk {
                executor = "${params.executor}"
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 2
                memory = params.memory ?: { 8.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: applyBqsr_gatk {
                executor = "${params.executor}"
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 2
                memory = params.memory ?: { 10.GB * task.attempt }
                time = { 18.h * task.attempt }
            }
            withName: collectWgsMetrics_gatk {
                executor = "${params.executor}"
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 2
                memory = params.memory ?: { 10.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: collectGcBiasMetrics_gatk {
                executor = "${params.executor}"
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 2
                memory = params.memory ?: { 10.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: extremeBamQualityControl_qualimap {
                executor = "${params.executor}"
                container = "containers/qualimap-2.2.1.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 8.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
        }
    }

    // Profile for Germline Variant Analysis step of pipeline using Slurm executor
    germline {

        singularity.enabled = true
        singularity.autoMounts = true

        if( "${params.executor}" == 'slurm' ) {
            process.clusterOptions = '--ntasks-per-node=1'
        }

        process {

            errorStrategy = { sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' }
            maxRetries = 3

            withName: splitIntervalList_gatk {
                executor = "${params.executor}"
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = 1.GB
                time = 1.h
            }
            withName: haplotypeCaller_gatk {
                executor = "${params.executor}"
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: { 10.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: mergeAndSortGvcfs_gatk {
                executor = "${params.executor}"
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: { 14.GB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: combineAllGvcfs_gatk {
                executor = "${params.executor}"
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: { 16.GB * task.attempt }
                time = { 60.h * task.attempt }
            }
            withName: jointGenotyping_gatk {
                executor = "${params.executor}"
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: {10.GB * task.attempt }
                time = { 60.h * task.attempt }
            }
            withName: excessHeterozygosityHardFilter_gatk {
                executor = "${params.executor}"
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: { 2.GB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: indelVariantRecalibration_gatk {
                executor = "${params.executor}"
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: { 6.GB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: snpVariantRecalibration_gatk {
                executor = "${params.executor}"
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: { 10.GB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: applyIndelAndSnpVqsr_gatk {
                executor = "${params.executor}"
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: splitMultiallelicAndLeftNormalizeVcf_bcftools {
                executor = "${params.executor}"
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 1.GB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: downloadVepAnnotationReferences_vep {
                executor = "${params.executor}"
                container = "containers/vep-101.0.simg"
                cpus = 1
                memory = params.memory ?: 4.GB
                time = { 8.h * task.attempt }
            }
            withName: annotateGermlineVcf_vep {
                executor = "${params.executor}"
                container = "containers/vep-101.0.simg"
                cpus = 1
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 18.h * task.attempt }
            }
            withName: referenceVcfPrep_bcftools {
                executor = "${params.executor}"
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: 1.GB
                time = 13.h
            }
            withName: mergeCohortAndReferenceVcf_bcftools {
                executor = "${params.executor}"
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: hardFilterCohortReferenceMergedVcf_vcftools {
                executor = "${params.executor}"
                container = "containers/vcftools-0.1.16.simg"
                cpus = 1
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: filterPlinkFilesForAdmixture_plink {
                executor = "${params.executor}"
                container = "containers/plink-1.90.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 2.GB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: ancestryEstimation_admixture {
                executor = "${params.executor}"
                container = "containers/admixture-1.3.0.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 48.h * task.attempt }
            }
        }
    }

    // Profile for Somatic Variant Analysis step of pipeline using Slurm executor
    somatic {

        singularity.enabled = true
        singularity.autoMounts = true

        if( "${params.executor}" == 'slurm' ) {
            process.clusterOptions = '--ntasks-per-node=1'
        }

        process {

            errorStrategy = { sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' }
            maxRetries = 3

            withName: identifySampleSex_allelecount {
                executor = "${params.executor}"
                container = "containers/allelecount-4.2.1.simg"
                cpus = 1
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: telomereLengthEstimation_telomerecat {
                executor = "${params.executor}"
                container = "containers/telomerecat-3.4.0.simg"
                cpus = params.cpus ?: 6
                memory = params.memory ?: { 6.GB * task.attempt }
                time = { 8.h * task.attempt }
            }
            withName: telomereEstimation_telomerehunter {
                executor = "${params.executor}"
                container = "containers/telomerehunter-1.1.0.simg"
                cpus = params.cpus ?: 4
                memory = params.memory ?: { 6.GB * task.attempt }
                time = { 8.h * task.attempt }
            }
            withName: bamPileupForConpair_conpair {
                executor = "${params.executor}"
                container = "containers/conpair-0.2.simg"
                cpus = 1
                memory = params.memory ?: { 1.GB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: concordanceAndContaminationEstimation_conpair {
                executor = "${params.executor}"
                container = "containers/conpair-0.2.simg"
                cpus = 1
                memory = params.memory ?: { 1.GB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: snvAndIndelCalling_varscan {
                executor = "${params.executor}"
                container = "containers/varscan-2.3.9-samtools-1.11.simg"
                cpus = 1
                memory = params.memory ?: { 8.GB * task.attempt }
                time = { 8.h * task.attempt }
            }
            withName: concatenateVarscanPerChromosomeVcfs_bcftools {
                executor = "${params.executor}"
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: filterRawSnvAndIndels_varscan {
                executor = "${params.executor}"
                container = "containers/varscan-2.3.9-samtools-1.11.simg"
                cpus = 1
                memory = params.memory ?: { 8.GB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: bamReadcountForVarscanFpFilter_bamreadcount {
                executor = "${params.executor}"
                container = "containers/bam-readcount-0.8.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 8.GB * task.attempt }
                time = { 8.h * task.attempt }
            }
            withName: falsePositivefilterSnvAndIndels_varscan {
                executor = "${params.executor}"
                container = "containers/varscan-2.3.9-samtools-1.11.simg"
                cpus = 1
                memory = params.memory ?: { 8.GB * task.attempt }
                time = { 8.h * task.attempt }
            }
            withName: splitMultiallelicAndLeftNormalizeVarscanVcf_bcftools {
                executor = "${params.executor}"
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: mutect2GnomadReferenceVcfPrep_bcftools {
                executor = "${params.executor}"
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: 256.MB
                time = 13.h
            }
            withName: snvAndIndelCalling_gatk {
                executor = "${params.executor}"
                container = "containers/gatk-4.1.7.0.simg"
                cpus = params.cpus ?: 4
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 8.h * task.attempt }
            }
            withName: mergeAndSortMutect2Vcfs_gatk {
                executor = "${params.executor}"
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: mergeMutect2StatsForFiltering_gatk {
                executor = "${params.executor}"
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: pileupSummariesForMutect2Contamination_gatk {
                executor = "${params.executor}"
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: gatherTumorPileupSummariesForMutect2Contamination_gatk {
                executor = "${params.executor}"
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: gatherNormalPileupSummariesForMutect2Contamination_gatk {
                executor = "${params.executor}"
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: mutect2ContaminationCalculation_gatk {
                executor = "${params.executor}"
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: mutect2VariantFiltration_gatk {
                executor = "${params.executor}"
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 8.h * task.attempt }
            }
            withName: splitMultiallelicAndLeftNormalizeMutect2Vcf_bcftools {
                executor = "${params.executor}"
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: splitMutectSnvsAndIndelsForConsensus_bcftools {
                executor = "${params.executor}"
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: binReadCoverage_copycat {
                executor = "${params.executor}"
                container = "containers/bedtools-2.30.0.simg"
                cpus = 1
                memory = params.memory ?: { 8.GB * task.attempt }
                time = { 16.h * task.attempt }
            }
            withName: cnvCalling_ascatngs {
                executor = "${params.executor}"
                container = "containers/ascatngs-4.5.0.simg"
                cpus = params.cpus ?: 4
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 4.h * task.attempt }
            }
            withName: bamMpileupForControlFreec_samtools {
                executor = "${params.executor}"
                container = "containers/control-freec-11.6.simg"
                cpus = 1
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 8.h * task.attempt }
            }
            withName: mergeMpileupsForControlFreec_samtools {
                executor = "${params.executor}"
                container = "containers/control-freec-11.6.simg"
                cpus = 1
                memory = params.memory ?: { 8.GB * task.attempt }
                time = { 8.h * task.attempt }
            }
            withName: cnvCalling_controlfreec {
                executor = "${params.executor}"
                container = "containers/control-freec-11.6.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: cnvPredictionPostProcessing_controlfreec {
                executor = "${params.executor}"
                container = "containers/control-freec-11.6.simg"
                cpus = 1
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: bamprocessPerChromosome_sclust {
                executor = "${params.executor}"
                container = "containers/sclust-1.1.simg"
                cpus = 1
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 4.h * task.attempt }
            }
            withName: mergeBamprocessData_sclust {
                executor = "${params.executor}"
                container = "containers/sclust-1.1.simg"
                cpus = 1
                memory = params.memory ?: { 8.GB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: prepareVcfForSclust_vcftools {
                executor = "${params.executor}"
                container = "containers/vcftools-0.1.16.simg"
                cpus = 1
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: cnvCalling_sclust {
                executor = "${params.executor}"
                container = "containers/sclust-1.1.simg"
                cpus = 1
                memory = params.memory ?: { 16.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: mutationalClustering_sclust {
                executor = "${params.executor}"
                container = "containers/sclust-1.1.simg"
                cpus = 1
                memory = params.memory ?: { 16.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: svAndIndelCalling_manta {
                executor = "${params.executor}"
                container = "containers/manta-1.6.0.simg"
                cpus = params.cpus ?: 12
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 4.h * task.attempt }
            }
            withName: filterAndPostprocessMantaVcf_bcftools {
                executor = "${params.executor}"
                container = "containers/bcftools-1.10.2.simg"
                cpus = 1
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: snvAndIndelCalling_strelka {
                executor = "${params.executor}"
                container = "containers/strelka-2.9.10.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 18.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: splitMultiallelicAndLeftNormalizeStrelkaVcf_bcftools {
                executor = "${params.executor}"
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: svAndIndelCalling_svaba {
                executor = "${params.executor}"
                container = "containers/svaba-1.1.3.simg"
                cpus = params.cpus ?: 12
                memory = params.memory ?: { 12.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: filterAndPostprocessSvabaVcf_bcftools {
                executor = "${params.executor}"
                container = "containers/bcftools-1.10.2.simg"
                cpus = 1
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: leftNormalizeSvabaVcf_bcftools {
                executor = "${params.executor}"
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: svAndIndelCalling_delly {
                executor = "${params.executor}"
                container = "containers/delly-0.8.7.simg"
                cpus = 2
                memory = params.memory ?: { 18.GB * task.attempt }
                time = { 12.h * task.attempt }
            }
            withName: filterAndPostprocessDellyVcf_bcftools {
                executor = "${params.executor}"
                container = "containers/bcftools-1.10.2.simg"
                cpus = 1
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: igRearrangementsAndTranslocations_igcaller {
                executor = "${params.executor}"
                container = "containers/igcaller-1.1.simg"
                cpus = params.cpus ?: 2
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: mergeAndGenerateConsensusSnvCalls_mergevcf {
                executor = "${params.executor}"
                container = "containers/mergevcf-0.2.simg"
                cpus = 1
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: mergeAndGenerateConsensusIndelCalls_mergevcf {
                executor = "${params.executor}"
                container = "containers/mergevcf-0.2.simg"
                cpus = 1
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 3.h * task.attempt }
            }
            withName: consensusSnvMpileup_bcftools {
                executor = "${params.executor}"
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 6.GB * task.attempt }
                time = { 8.h * task.attempt }
            }
            withName: addSamplesToConsensusSnvVcf_vatools {
                executor = "${params.executor}"
                container = "containers/vcftools-0.1.16.simg"
                cpus = 1
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 4.h * task.attempt }
            }
            withName: annotateConsensusSnvVcfFormatColumnAndFilter_bcftools {
                executor = "${params.executor}"
                container = "containers/bcftools-1.10.2.simg"
                cpus = 1
                memory = params.memory ?: { 6.GB * task.attempt }
                time = { 4.h * task.attempt }
            }
            withName: repeatsAndStrandBiasFilterSnvs_vcftools {
                executor = "${params.executor}"
                container = "containers/vcftools-0.1.16.simg"
                cpus = 1
                memory = params.memory ?: { 6.GB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: consensusIndelMpileup_bcftools {
                executor = "${params.executor}"
                container = "containers/bcftools-1.10.2.simg"
                cpus = params.cpus ?: 8
                memory = params.memory ?: { 6.GB * task.attempt }
                time = { 8.h * task.attempt }
            }
            withName: addSamplesToConsensusIndelVcf_vatools {
                executor = "${params.executor}"
                container = "containers/vcftools-0.1.16.simg"
                cpus = 1
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 4.h * task.attempt }
            }
            withName: annotateConsensusIndelVcfFormatColumnAndFilter_bcftools {
                executor = "${params.executor}"
                container = "containers/bcftools-1.10.2.simg"
                cpus = 1
                memory = params.memory ?: { 6.GB * task.attempt }
                time = { 4.h * task.attempt }
            }
            withName: repeatsAndStrandBiasFilterIndels_vcftools {
                executor = "${params.executor}"
                container = "containers/vcftools-0.1.16.simg"
                cpus = 1
                memory = params.memory ?: { 6.GB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: mergeAndGenerateConsensusCnvCalls_bedtools {
                executor = "${params.executor}"
                container = "containers/bedtools-2.30.0.simg"
                cpus = 1
                memory = params.memory ?: { 1.GB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: highQualityTransformConsensusCnvs_tidyverse {
                executor = "${params.executor}"
                container = "containers/tidyverse-1.3.1.simg"
                cpus = 1
                memory = params.memory ?: { 1.GB * task.attempt }
                time = { 2.h * task.attempt }
            }
            withName: downloadAnnotsvAnnotationReferences_annotsv {
                executor = "${params.executor}"
                container = "containers/annotsv-3.1.1.simg"
                cpus = 1
                memory = params.memory ?: 4.GB
                time = { 13.h * task.attempt }
            }
            withName: annotateConsensusCnvCalls_annotsv {
                executor = "${params.executor}"
                container = "containers/annotsv-3.1.1.simg"
                cpus = 1
                memory = params.memory ?: 4.GB
                time = { 1.h * task.attempt }
            }
            withName: mergeSubclonalCnvCalls {
                executor = "${params.executor}"
                container = "containers/base.simg"
                cpus = 1
                memory = 256.MB
                time = 30.m
            }
            withName: mergeAndGenerateConsensusSvCalls_survivor {
                executor = "${params.executor}"
                container = "containers/survivor-1.0.7.simg"
                cpus = 1
                memory = params.memory ?: { 1.GB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: prepConsensusSvVcfForFpFiltering_vatools {
                executor = "${params.executor}"
                container = "containers/vcftools-0.1.16.simg"
                cpus = 1
                memory = params.memory ?: { 2.GB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: falsePostiveSvFiltering_duphold {
                executor = "${params.executor}"
                container = "containers/duphold-0.2.3.simg"
                cpus = params.cpus ?: 4
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: extractFpFilterPassingSvCalls_bcftools {
                executor = "${params.executor}"
                container = "containers/bcftools-1.10.2.simg"
                cpus = 1
                memory = params.memory ?: { 256.MB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: annotateConsensusSvCalls_annotsv {
                executor = "${params.executor}"
                container = "containers/annotsv-3.1.1.simg"
                cpus = 1
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 1.h * task.attempt }
            }
            withName: mergeMetadataOutput {
                executor = "${params.executor}"
                container = "containers/base.simg"
                cpus = 1
                memory = 256.MB
                time = 30.m
            }
            withName: downloadVepAnnotationReferences_vep {
                executor = "${params.executor}"
                container = "containers/vep-101.0.simg"
                cpus = 1
                memory = params.memory ?: 4.GB
                time = { 8.h * task.attempt }
            }
            withName: annotateSnvAndIndelVcf_vep {
                executor = "${params.executor}"
                container = "containers/vep-101.0.simg"
                cpus = params.cpus ?: 1
                memory = params.memory ?: { 4.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
        }
    }
}
