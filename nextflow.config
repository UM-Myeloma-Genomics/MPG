manifest {
    author = 'Patrick Blaney'
    homePage = 'https://github.com/pblaney/mgp1000'
    description = 'Myeloma Genome Project 1000 Bioinformatics Nextflow Pipeline'
    name = 'MGP1000'
    nextflowVersion = '>=20.01.0'
}

// Set global default parameters used in config file that will be overwritten with CLI run command
params.email = null
params.run_id = null

notification {
    
    if( "${params.email}" ) {
        enabled = true
        to = "${params.email}"
        from = "${params.email}"
    } else {
        enabled = false
    }
}

report {
    enabled = true
    file = "nextflow_report.${params.run_id}.html"
}

trace {
    enabled = true
    fields = "task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes"
    file = "trace.${params.run_id}.txt"
    raw = true
}

timeline {
    enabled = true
    file = "timeline_report.${params.run_id}.html"
}

// #################################################### \\
// ~~~~~~~~~~~~~~ PROFILE CONFIGURATION ~~~~~~~~~~~~~~~ \\

params.singularity_module = null

profiles {

    // Profile for Preprocessing step of pipeline using Slurm executor
    preprocessing {
        
        singularity.enabled = true
        singularity.autoMounts = true

        // Set the Singularity module if one was provided as input parameter
        if( params.singularity_module ) {
            process.module = "${params.singularity_module}"
        }

        process.executor = 'slurm'
        process.clusterOptions = '--ntasks-per-node=1'

        executor.queueSize = 50
        executor.queueStatInterval = '3 min'
        executor.exitReadTimeout = '60 min'
        executor.submitRateLimit = '10 sec'

        process {

            errorStrategy = { sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' }

            withName: revertMappedBam_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                maxRetries = 2
                memory = { 16.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: bamToFastq_biobambam {
                container = "containers/biobambam-2.0.87.simg"
                cpus = 1
                maxRetries = 3
                memory = { 256.MB * task.attempt }
                time = { 24.h * task.attempt }
            }
            withName: fastqTrimming_trimmomatic {
                container = "containers/trimmomatic-0.36.simg"
                cpus = 8
                maxRetries = 3
                memory = { 6.GB * task.attempt }
                time = { 18.h * task.attempt }
            }
            withName: fastqQualityControlMetrics_fastqc {
                container = "containers/fastqc-0.11.9.simg"
                cpus = 1
                maxRetries = 3
                memory = { 512.MB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: alignment_bwa {
                container = "containers/bwa-0.7.17-sambamba-0.7.1.simg"
                cpus = 8
                maxRetries = 3
                memory = { 18.GB * task.attempt }
                time = { 32.h * task.attempt }
            }
            withName: fixMateInformationAndSort_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                maxRetries = 3
                memory = { 18.GB * task.attempt }
                time = { 24.h * task.attempt }
            }
            withName: markDuplicatesAndIndex_sambamba {
                container = "containers/sambamba-0.7.1.simg"
                cpus = 1
                maxRetries = 3
                memory = { 8.GB * task.attempt }
                time = { 18.h * task.attempt }
            }
            withName: downsampleBam_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                maxRetries = 2
                memory = { 12.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: baseRecalibrator_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                maxRetries = 1
                memory = { 4.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: applyBqsr_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                maxRetries = 3
                memory = { 4.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: collectWgsMetrics_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                maxRetries = 2
                memory = { 8.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: collectGcBiasMetrics_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                maxRetries = 2
                memory = { 8.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: extremeBamQualityControl_qualimap {
                container = "containers/qualimap-2.2.1.simg"
                cpus = 8
                maxRetries = 1
                memory = { 8.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
        }
    }

    // Profile for Germline Variant Analysis step of pipeline using Slurm executor
    germline {

        singularity.enabled = true
        singularity.autoMounts = true

        // Set the Singularity module if one was provided as input parameter
        if( params.singularity_module ) {
            process.module = "${params.singularity_module}"
        }

        process.executor = 'slurm'
        process.clusterOptions = '--ntasks-per-node=1'

        executor.queueSize = 50
        executor.queueStatInterval = '3 min'
        executor.exitReadTimeout = '60 min'
        executor.submitRateLimit = '10 sec'

        process {

            errorStrategy = { sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' }

            withName: normalSampleTelomereLengthEstimation_telseq {
                container = "containers/telseq-0.0.1.simg"
                cpus = 1
                maxRetries = 2
                memory = { 128.MB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: splitIntervalList_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                memory = 1.GB
                time = 1.h
            }
            withName: haplotypeCaller_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                maxRetries = 3
                memory = { 10.GB * task.attempt }
                time = { 24.h * task.attempt }
            }
            withName: mergeAndSortGvcfs_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                maxRetries = 2
                memory = { 14.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: combineAllGvcfs_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                maxRetries = 2
                memory = { 16.GB * task.attempt }
                time = { 60.h * task.attempt }
            }
            withName: jointGenotyping_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                maxRetries = 2
                memory = {10.GB * task.attempt }
                time = { 60.h * task.attempt }
            }
            withName: excessHeterozygosityHardFilter_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                maxRetries = 2
                memory = { 2.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: indelVariantRecalibration_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                maxRetries = 2
                memory = { 6.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: snpVariantRecalibration_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                maxRetries = 2
                memory = { 10.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: applyIndelAndSnpVqsr_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                maxRetries = 2
                memory = { 4.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: splitMultiallelicAndLeftNormalizeVcf_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = 8
                maxRetries = 2
                memory = { 1.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: downloadVepAnnotationReferences_vep {
                container = "containers/vep-101.0.simg"
                cpus = 1
                memory = 256.MB
                time = 1.h
            }
            withName: annotateGermlineVcf_vep {
                container = "containers/vep-101.0.simg"
                cpus = 1
                maxRetries = 2
                memory = { 4.GB * task.attempt }
                time = { 18.h * task.attempt }
            }
            withName: referenceVcfPrep_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = 8
                memory = 256.MB
                time = 13.h
            }
            withName: mergeCohortAndReferenceVcf_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = 8
                maxRetries = 2
                memory = { 256.MB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: hardFilterCohortReferenceMergedVcf_vcftools {
                container = "containers/vcftools-0.1.16.simg"
                cpus = 1
                maxRetries = 2
                memory = { 256.MB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: filterPlinkFilesForAdmixture_plink {
                container = "containers/plink-1.90.simg"
                cpus = 1
                maxRetries = 2
                memory = { 2.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: ancestryEstimation_admixture {
                container = "containers/admixture-1.3.0.simg"
                cpus = 8
                maxRetries = 2
                memory = { 4.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
        }
    }

    // Profile for Somatic Variant Analysis step of pipeline using Slurm executor
    somatic {

        singularity.enabled = true
        singularity.autoMounts = true

        // Set the Singularity module if one was provided as input parameter
        if( params.singularity_module ) {
            process.module = "${params.singularity_module}"
        }

        process.executor = 'slurm'
        process.clusterOptions = '--ntasks-per-node=1'

        executor.queueSize = 50
        executor.queueStatInterval = '3 min'
        executor.exitReadTimeout = '60 min'
        executor.submitRateLimit = '10 sec'

        process {

            errorStrategy = { sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' }

            withName: tumorSampleTelomereLengthEstimation_telseq {
                container = "containers/telseq-0.0.1.simg"
                cpus = 1
                maxRetries = 1
                memory = { 256.MB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: bamPileupForConpair_conpair {
                container = "containers/conpair-0.2.simg"
                cpus = 1
                maxRetries = 2
                memory = { 1.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: concordanceAndContaminationEstimation_conpair {
                container = "containers/conpair-0.2.simg"
                cpus = 1
                maxRetries = 2
                memory = { 1.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: snvAndIndelCalling_varscan {
                container = "containers/varscan-2.3.9-samtools-1.11.simg"
                cpus = 1
                maxRetries = 2
                memory = { 8.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: concatenateVarscanPerChromosomeVcfs_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = 8
                maxRetries = 1
                memory = 256.MB
                time = 13.h
            }
            withName: filterRawSnvAndIndels_varscan {
                container = "containers/varscan-2.3.9-samtools-1.11.simg"
                cpus = 1
                maxRetries = 2
                memory = { 8.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: bamReadcountForVarscanFpFilter_bamreadcount {
                container = "containers/bam-readcount-0.8.simg"
                cpus = 8
                maxRetries = 2
                memory = { 8.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: falsePositivefilterSnvAndIndels_varscan {
                container = "containers/varscan-2.3.9-samtools-1.11.simg"
                cpus = 1
                maxRetries = 2
                memory = { 8.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: concatSplitMultiallelicAndLeftNormalizeVarscanVcf_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = 8
                maxRetries = 1
                memory = { 256.MB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: mutect2GnomadReferenceVcfPrep_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = 8
                memory = 256.MB
                time = 13.h
            }
            withName: mutect2SnvAndIndelCalling_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                maxRetries = 1
                memory = { 12.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: mergeAndSortMutect2Vcfs_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                maxRetries = 1
                memory = { 12.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: mergeMutect2StatsForFiltering_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                maxRetries = 1
                memory = { 12.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: pileupSummariesForMutect2Contamination_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                maxRetries = 1
                memory = { 12.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: gatherTumorPileupSummariesForMutect2Contamination_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                maxRetries = 1
                memory = { 12.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: gatherNormalPileupSummariesForMutect2Contamination_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                maxRetries = 1
                memory = { 12.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: mutect2ContaminationCalculation_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                maxRetries = 1
                memory = { 12.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: mutect2VariantFiltration_gatk {
                container = "containers/gatk-4.1.7.0.simg"
                cpus = 1
                maxRetries = 1
                memory = { 12.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
            withName: splitMultiallelicAndLeftNormalizeMutect2Vcf_bcftools {
                container = "containers/bcftools-1.10.2.simg"
                cpus = 8
                maxRetries = 1
                memory = { 256.MB * task.attempt }
                time = { 13.h * task.attempt }
            }



            withName: downloadVepAnnotationReferences_vep {
                container = "containers/vep-101.0.simg"
                cpus = 1
                memory = 256.MB
                time = 1.h
            }
            withName: annotateSomaticVcf_vep {
                container = "containers/vep-101.0.simg"
                cpus = 1
                maxRetries = 2
                memory = { 4.GB * task.attempt }
                time = { 13.h * task.attempt }
            }
        }
    }


    // Profiles for local testing of pipeline steps in development environment using Docker, likely will require
    // configuration of the daemon's resources. This can be done within the 'Preferences' > 'Resources' tab of the 
    // Docker Desktop Dashboard for macOS
    
    // Preprocessing Dev Profile
    dev_preprocessing {

        docker.enabled = true

        process {

            withName: revertMappedBam_gatk {
                container = "patrickblaneynyu/mgp1000:gatk-4.1.7.0"
                memory = 8.GB
            }
            withName: bamToFastq_biobambam {
                container = "patrickblaneynyu/mgp1000:biobambam-2.0.87"
                memory = 2.GB
            }
            withName: fastqTrimming_trimmomatic {
                container = "patrickblaneynyu/mgp1000:trimmomatic-0.36"
                cpus = 4
                memory = 2.GB
            }
            withName: fastqQualityControlMetrics_fastqc {
                container = "patrickblaneynyu/mgp1000:fastqc-0.11.9"
                memory = 2.GB
            }
            withName: alignment_bwa {
                container = "patrickblaneynyu/mgp1000:bwa-0.7.17-sambamba-0.7.1"
                cpus = 4
                memory = 10.GB
            }
            withName: fixMateInformationAndSort_gatk {
                container = "patrickblaneynyu/mgp1000:gatk-4.1.7.0"
                memory = 6.GB
            }
            withName: markDuplicatesAndIndex_sambamba {
                container = "patrickblaneynyu/mgp1000:sambamba-0.7.1"
                cpus = 2
                memory = 4.GB
            }
            withName: downsampleBam_gatk {
                container = "patrickblaneynyu/mgp1000:gatk-4.1.7.0"
                memory = 4.GB
            }
            withName: baseRecalibrator_gatk {
                container = "patrickblaneynyu/mgp1000:gatk-4.1.7.0"
                memory = 4.GB
            }
            withName: applyBqsr_gatk {
                container = "patrickblaneynyu/mgp1000:gatk-4.1.7.0"
                memory = 4.GB
            }
            withName: collectWgsMetrics_gatk {
                container = "patrickblaneynyu/mgp1000:gatk-4.1.7.0"
                memory = 8.GB
            }
            withName: collectGcBiasMetrics_gatk {
                container = "patrickblaneynyu/mgp1000:gatk-4.1.7.0"
                memory = 8.GB
            }
            withName: extremeBamQualityControl_qualimap {
                container = "patrickblaneynyu/mgp1000:qualimap-2.2.1"
                cpus = 2
                memory = 8.GB
            }
        }
    }

    // Germline Variant Analysis Dev Profile
    dev_germline {

        docker.enabled = true

        process {

            withName: normalSampleTelomereLengthEstimation_telseq {
                container = "patrickblaneynyu/mgp1000:telseq-0.0.1"
                memory = 4.GB
            }
            withName: splitIntervalList_gatk {
                container = "patrickblaneynyu/mgp1000:gatk-4.1.7.0"
                memory = 4.GB
            }
            withName: haplotypeCaller_gatk {
                container = "patrickblaneynyu/mgp1000:gatk-4.1.7.0"
                memory = 4.GB
                cpus = 2
            }
            withName: mergeAndSortGvcfs_gatk {
                container = "patrickblaneynyu/mgp1000:gatk-4.1.7.0"
                memory = 4.GB
            }
            withName: combineAllGvcfs_gatk {
                container = "patrickblaneynyu/mgp1000:gatk-4.1.7.0"
                memory = 4.GB
            }
            withName: jointGenotyping_gatk {
                container = "patrickblaneynyu/mgp1000:gatk-4.1.7.0"
                memory = 4.GB
                cpus = 2
            }
            withName: excessHeterozygosityHardFilter_gatk {
                container = "patrickblaneynyu/mgp1000:gatk-4.1.7.0"
                memory = 4.GB
            }
            withName: indelVariantRecalibration_gatk {
                container = "patrickblaneynyu/mgp1000:gatk-4.1.7.0"
                memory = 4.GB
            }
            withName: snpVariantRecalibration_gatk {
                container = "patrickblaneynyu/mgp1000:gatk-4.1.7.0"
                memory = 4.GB
            }
            withName: applyIndelAndSnpVqsr_gatk {
                container = "patrickblaneynyu/mgp1000:gatk-4.1.7.0"
                memory = 4.GB
            }
            withName: splitMultiallelicAndLeftNormalizeVcf_bcftools {
                container = "patrickblaneynyu/mgp1000:bcftools-1.10.2"
                memory = 4.GB
                cpus = 2
            }
            withName: downloadVepAnnotationReferences_vep {
                container = "patrickblaneynyu/mgp1000:vep-101.0"
                memory = 4.GB
                cpus = 1
            }
            withName: annotateGermlineVcf_vep {
                container = "patrickblaneynyu/mgp1000:vep-101.0"
                memory = 4.GB
                cpus = 1
            }
            withName: referenceVcfPrep_bcftools {
                container = "patrickblaneynyu/mgp1000:bcftools-1.10.2"
                memory = 4.GB
                cpus = 2
            }
            withName: mergeCohortAndReferenceVcf_bcftools {
                container = "patrickblaneynyu/mgp1000:bcftools-1.10.2"
                memory = 4.GB
                cpus = 2
            }
            withName: hardFilterCohortReferenceMergedVcf_vcftools {
                container = "patrickblaneynyu/mgp1000:vcftools-0.1.16"
                memory = 4.GB
            }
            withName: filterPlinkFilesForAdmixture_plink {
                container = "patrickblaneynyu/mgp1000:plink-1.90"
                memory = 4.GB
                cpus = 2
            }
            withName: ancestryEstimation_admixture {
                container = "patrickblaneynyu/mgp1000:admixture-1.3.0"
                memory = 4.GB
                cpus = 2
            }
        }
    }

    // Somatic Variant Analysis Dev Profile
    dev_somatic {

        docker.enabled = true

        process {

            withName: tumorSampleTelomereLengthEstimation_telseq {
                container = "patrickblaneynyu/mgp1000:telseq-0.0.1"
                memory = 3.GB
            }
            withName: bamPileupForConpair_conpair {
                container = "patrickblaneynyu/mgp1000:conpair-0.2"
                memory = 4.GB
            }
            withName: concordanceAndContaminationEstimation_conpair {
                container = "patrickblaneynyu/mgp1000:conpair-0.2"
                memory = 4.GB
            }
            withName: snvAndIndelCalling_varscan {
                container = "patrickblaneynyu/mgp1000:varscan-2.3.9-samtools-1.11"
                memory = 3.GB
            }
            withName: concatenateVarscanPerChromosomeVcfs_bcftools {
                container = "patrickblaneynyu/mgp1000:bcftools-1.10.2"
                memory = 6.GB
                cpus = 2
            }
            withName: filterRawSnvAndIndels_varscan {
                container = "patrickblaneynyu/mgp1000:varscan-2.3.9-samtools-1.11"
                memory = 6.GB
            }
            withName: bamReadcountForVarscanFpFilter_bamreadcount {
                container = "patrickblaneynyu/mgp1000:bam-readcount-0.8"
                memory = 6.GB
                cpus = 2
            }
            withName: falsePositivefilterSnvAndIndels_varscan {
                container = "patrickblaneynyu/mgp1000:varscan-2.3.9-samtools-1.11"
                memory = 6.GB
            }
            withName: concatSplitMultiallelicAndLeftNormalizeVarscanVcf_bcftools {
                container = "patrickblaneynyu/mgp1000:bcftools-1.10.2"
                memory = 6.GB
                cpus = 2
            }
            withName: mutect2GnomadReferenceVcfPrep_bcftools {
                container = "patrickblaneynyu/mgp1000:bcftools-1.10.2"
                memory = 3.GB
                cpus = 2
            }
            withName: mutect2SnvAndIndelCalling_gatk {
                container = "patrickblaneynyu/mgp1000:gatk-4.1.7.0"
                memory = 3.GB
                cpus = 2
            }
            withName: mergeAndSortMutect2Vcfs_gatk {
                container = "patrickblaneynyu/mgp1000:gatk-4.1.7.0"
                memory = 3.GB
            }
            withName: mergeMutect2StatsForFiltering_gatk {
                container = "patrickblaneynyu/mgp1000:gatk-4.1.7.0"
                memory = 3.GB
            }
            withName: pileupSummariesForMutect2Contamination_gatk {
                container = "patrickblaneynyu/mgp1000:gatk-4.1.7.0"
                memory = 3.GB
            }
            withName: gatherTumorPileupSummariesForMutect2Contamination_gatk {
                container = "patrickblaneynyu/mgp1000:gatk-4.1.7.0"
                memory = 3.GB
            }
            withName: gatherNormalPileupSummariesForMutect2Contamination_gatk {
                container = "patrickblaneynyu/mgp1000:gatk-4.1.7.0"
                memory = 3.GB
            }
            withName: mutect2ContaminationCalculation_gatk {
                container = "patrickblaneynyu/mgp1000:gatk-4.1.7.0"
                memory = 3.GB
            }
            withName: mutect2VariantFiltration_gatk {
                container = "patrickblaneynyu/mgp1000:gatk-4.1.7.0"
                memory = 3.GB
            }
            withName: splitMultiallelicAndLeftNormalizeMutect2Vcf_bcftools {
                container = "patrickblaneynyu/mgp1000:bcftools-1.10.2"
                memory = 6.GB
                cpus = 2
            }


            withName: bamMpileupForControlFreec_samtools {
                container = "patrickblaneynyu/mgp1000:control-freec-11.6"
                memory = 2.GB
            }
            withName: mergeMpileupsForControlFreec_controlfreec {
                container = "patrickblaneynyu/mgp1000:control-freec-11.6"
                memory = 4.GB
            }



            withName: svAndIndelCalling_manta {
                container = "patrickblaneynyu/mgp1000:manta-1.6.0"
                memory = 6.GB
                cpus = 2
            }
            withName: downloadVepAnnotationReferences_vep {
                container = "patrickblaneynyu/mgp1000:vep-101.0"
                memory = 4.GB
                cpus = 1
            }
            withName: annotateSomaticVcf_vep {
                container = "patrickblaneynyu/mgp1000:vep-101.0"
                memory = 4.GB
                cpus = 1
            }
        }
    }
}